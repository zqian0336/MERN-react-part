{"ast":null,"code":"import _toConsumableArray from\"/Users/zhichengqian/Desktop/Project/ReactProject/MERN/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/zhichengqian/Desktop/Project/ReactProject/MERN/mern/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_POSTS,POST_ERROR,UPDATE_LIKES,DELETE_POST,ADD_POST,GET_POST,ADD_COMMENT,REMOVE_COMMENT}from'../actions/types';var initialState={posts:[],post:null,loading:true,error:{}};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_POSTS:return _objectSpread(_objectSpread({},state),{},{posts:payload,loading:false});case GET_POST:return _objectSpread(_objectSpread({},state),{},{post:payload,loading:false});case ADD_POST:return _objectSpread(_objectSpread({},state),{},{posts:[payload].concat(_toConsumableArray(state.posts)),loading:false});case DELETE_POST:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.filter(function(post){return post._id!==payload;}),loading:false});case POST_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case UPDATE_LIKES:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){return post._id===payload.id?_objectSpread(_objectSpread({},post),{},{likes:payload.likes}):post;}),loading:false});case ADD_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:payload}),loading:false});case REMOVE_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:state.post.comments.filter(function(comment){return comment._id!==payload;})}),loading:false});default:return state;}}","map":{"version":3,"sources":["/Users/zhichengqian/Desktop/Project/ReactProject/MERN/mern/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"uXAAA,OACIA,SADJ,CAEIC,UAFJ,CAGIC,YAHJ,CAIIC,WAJJ,CAKIC,QALJ,CAMIC,QANJ,CAOIC,WAPJ,CAQIC,cARJ,KASO,kBATP,CAWA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,IAAI,CAAE,IAFW,CAGjBC,OAAO,CAAE,IAHQ,CAIjBC,KAAK,CAAE,EAJU,CAArB,CAOA,cAAe,WAAuC,IAA9BC,CAAAA,KAA8B,2DAAtBL,YAAsB,IAARM,CAAAA,MAAQ,8CAC1CC,CAAAA,IAD0C,CACxBD,MADwB,CAC1CC,IAD0C,CACpCC,OADoC,CACxBF,MADwB,CACpCE,OADoC,CAGlD,OAAQD,IAAR,EACI,IAAKf,CAAAA,SAAL,CACI,sCACOa,KADP,MAEIJ,KAAK,CAAEO,OAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKN,CAAAA,QAAL,CACI,sCACOQ,KADP,MAEIH,IAAI,CAAEM,OAFV,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKP,CAAAA,QAAL,CACI,sCACOS,KADP,MAEIJ,KAAK,EAAGO,OAAH,4BAAeH,KAAK,CAACJ,KAArB,EAFT,CAGIE,OAAO,CAAE,KAHb,GAKJ,IAAKR,CAAAA,WAAL,CACI,sCACOU,KADP,MAEIJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmB,SAAAP,IAAI,QAAIA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAjB,EAAvB,CAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKV,CAAAA,UAAL,CACI,sCACOY,KADP,MAEID,KAAK,CAAEI,OAFX,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKT,CAAAA,YAAL,CACI,sCACOW,KADP,MAEIJ,KAAK,CAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgB,SAAAT,IAAI,QACvBA,CAAAA,IAAI,CAACQ,GAAL,GAAaF,OAAO,CAACI,EAArB,gCAA+BV,IAA/B,MAAqCW,KAAK,CAAEL,OAAO,CAACK,KAApD,GAA8DX,IADvC,EAApB,CAFX,CAKIC,OAAO,CAAE,KALb,GAOJ,IAAKL,CAAAA,WAAL,CACI,sCACOO,KADP,MAEIH,IAAI,gCAAOG,KAAK,CAACH,IAAb,MAAmBY,QAAQ,CAAEN,OAA7B,EAFR,CAGIL,OAAO,CAAE,KAHb,GAKJ,IAAKJ,CAAAA,cAAL,CACI,sCACOM,KADP,MAEIH,IAAI,gCACGG,KAAK,CAACH,IADT,MAEAY,QAAQ,CAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CACN,SAAAM,OAAO,QAAIA,CAAAA,OAAO,CAACL,GAAR,GAAgBF,OAApB,EADD,CAFV,EAFR,CAQIL,OAAO,CAAE,KARb,GAUJ,QACI,MAAOE,CAAAA,KAAP,CAzDR,CA2DH","sourcesContent":["import {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n} from '../actions/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n};\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            };\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            };\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            };\n        case POST_ERROR:\n            return {\n                ...state,\n                error: payload,\n                loading: false\n            };\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post =>\n                    post._id === payload.id ? { ...post, likes: payload.likes } : post\n                ),\n                loading: false\n            };\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: payload },\n                loading: false\n            };\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    comments: state.post.comments.filter(\n                        comment => comment._id !== payload\n                    )\n                },\n                loading: false\n            };\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}