{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, UPDATE_PROFILE, CLEAR_PROFILE, ACCOUNT_DELETED, GET_REPOS, NO_REPOS } from './types'; // Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await api.get('/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await api.get('/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await api.get(`/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Github repos\n\nexport const getGithubRepos = username => async dispatch => {\n  try {\n    const res = await api.get(`/profile/github/${username}`);\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: NO_REPOS\n    });\n  }\n}; // Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const res = await api.post('/profile', formData);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const res = await api.put('/profile/experience', formData);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const res = await api.put('/profile/education', formData);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Added', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete experience\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    const res = await api.delete(`/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete education\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await api.delete(`/profile/education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await api.delete('/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanently deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/zhichengqian/Desktop/Project/ReactProject/MERN/mern/client/src/actions/profile.js"],"names":["api","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","UPDATE_PROFILE","CLEAR_PROFILE","ACCOUNT_DELETED","GET_REPOS","NO_REPOS","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","getProfileById","userId","getGithubRepos","username","createProfile","formData","history","edit","post","push","errors","forEach","error","addExperience","put","addEducation","deleteExperience","id","delete","deleteEducation","deleteAccount","window","confirm"],"mappings":"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","sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\n\nimport {\n    GET_PROFILE,\n    GET_PROFILES,\n    PROFILE_ERROR,\n    UPDATE_PROFILE,\n    CLEAR_PROFILE,\n    ACCOUNT_DELETED,\n    GET_REPOS,\n    NO_REPOS\n} from './types';\n\n// Get current users profile\nexport const getCurrentProfile = () => async dispatch => {\n    try {\n        const res = await api.get('/profile/me');\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Get all profiles\nexport const getProfiles = () => async dispatch => {\n    dispatch({ type: CLEAR_PROFILE });\n\n    try {\n        const res = await api.get('/profile');\n\n        dispatch({\n            type: GET_PROFILES,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Get profile by ID\nexport const getProfileById = userId => async dispatch => {\n    try {\n        const res = await api.get(`/profile/user/${userId}`);\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Get Github repos\nexport const getGithubRepos = username => async dispatch => {\n    try {\n        const res = await api.get(`/profile/github/${username}`);\n\n        dispatch({\n            type: GET_REPOS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: NO_REPOS\n        });\n    }\n};\n\n// Create or update profile\nexport const createProfile = (\n    formData,\n    history,\n    edit = false\n) => async dispatch => {\n    try {\n        const res = await api.post('/profile', formData);\n\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        });\n\n        dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n        if (!edit) {\n            history.push('/dashboard');\n        }\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Add Experience\nexport const addExperience = (formData, history) => async dispatch => {\n    try {\n        const res = await api.put('/profile/experience', formData);\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Experience Added', 'success'));\n\n        history.push('/dashboard');\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Add Education\nexport const addEducation = (formData, history) => async dispatch => {\n    try {\n        const res = await api.put('/profile/education', formData);\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Education Added', 'success'));\n\n        history.push('/dashboard');\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Delete experience\nexport const deleteExperience = id => async dispatch => {\n    try {\n        const res = await api.delete(`/profile/experience/${id}`);\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Experience Removed', 'success'));\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Delete education\nexport const deleteEducation = id => async dispatch => {\n    try {\n        const res = await api.delete(`/profile/education/${id}`);\n\n        dispatch({\n            type: UPDATE_PROFILE,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Education Removed', 'success'));\n    } catch (err) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Delete account & profile\nexport const deleteAccount = () => async dispatch => {\n    if (window.confirm('Are you sure? This can NOT be undone!')) {\n        try {\n            await api.delete('/profile');\n\n            dispatch({ type: CLEAR_PROFILE });\n            dispatch({ type: ACCOUNT_DELETED });\n\n            dispatch(setAlert('Your account has been permanently deleted'));\n        } catch (err) {\n            dispatch({\n                type: PROFILE_ERROR,\n                payload: { msg: err.response.statusText, status: err.response.status }\n            });\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}